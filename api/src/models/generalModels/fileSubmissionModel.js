const { firestore } = require("../../services/firebase");
class DataSubmission {
  constructor({
    submissionType,
    originalName,
    autogeneratedName,
    createdAt,
    studentId,
  }) {
    this.submissionType = submissionType;
    this.originalName = originalName;
    this.autogeneratedName = autogeneratedName;
    this.studentId = studentId;
    this.createdAt = createdAt;
  }

  static async saveDataSubmission(submissionType, fileSubmissionData) {
    try {
      const dataSubmissionCollection = firestore().collection(submissionType);

      // Check if a submission already exists with the same studentId and submissionType
      const existingSubmission = await dataSubmissionCollection
        .where("studentId", "==", fileSubmissionData.studentId)
        .limit(1)
        .get();

      if (!existingSubmission.empty) {
        // A submission already exists for this student and submission type
        throw new Error("Submission already exists for this student");
      }

      const newDataSubmission = {
        submissionType: fileSubmissionData.submissionType,
        originalName: fileSubmissionData.originalName,
        autogeneratedName: fileSubmissionData.autogeneratedName,
        studentId: fileSubmissionData.studentId,
        createdAt: fileSubmissionData.createdAt,
      };

      await dataSubmissionCollection.add(newDataSubmission);
    } catch (error) {
      throw error;
    }
  }
  static async checkExistingSubmission(submissionType, studentId) {
    try {
      const submissionRef = firestore().collection(submissionType);
      const querySnapshot = await submissionRef
        .where("studentId", "==", studentId)
        .get();

      return !querySnapshot.empty;
    } catch (error) {
      throw error;
    }
  }
  static async getFileSubmissionsByStudentId(studentId) {
    try {
      const fileSubmissionsRef = firestore().collection("fileSubmissions");
      const querySnapshot = await fileSubmissionsRef
        .where("studentId", "==", studentId)
        .get();

      const fileSubmissions = [];
      querySnapshot.forEach((doc) => {
        const fileSubmissionData = doc.data();
        const fileSubmission = new FileSubmission({
          originalName: fileSubmissionData.originalName,
          studentId: fileSubmissionData.studentId,
        });
        fileSubmissions.push(fileSubmission);
      });
      if (fileSubmissions.length === 0) {
        return `${studentId}: No recorded files`;
      }
      return fileSubmissions;
    } catch (error) {
      throw error;
    }
  }

  static async getFileSubmissionById(studentId) {
    try {
      const fileSubmissionsRef = firestore().collection("fileSubmissions");
      const querySnapshot = await fileSubmissionsRef
        .where("studentId", "==", studentId)
        .get();

      if (querySnapshot.empty) {
        return null;
      }

      const fileSubmissionData = querySnapshot.docs[0].data();
      return new FileSubmission({
        originalName: fileSubmissionData.originalName,
        autogeneratedName: fileSubmissionData.autogeneratedName,
        studentId: fileSubmissionData.studentId,
        createdAt: fileSubmissionData.createdAt.toDate(),
      });
    } catch (error) {
      throw error;
    }
  }
}

module.exports = DataSubmission;
